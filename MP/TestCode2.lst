;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2/2/2021 11:31:00 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x283A      	GOTO       58
_mask:
;TestCode2.mbas,6 :: 		dim temp_holder as integer
;TestCode2.mbas,7 :: 		if character = 0 then
0x0003	0x3000      	MOVLW      0
0x0004	0x1283      	BCF        STATUS, 5
0x0005	0x1303      	BCF        STATUS, 6
0x0006	0x0623      	XORWF      FARG_mask_character+1, 0
0x0007	0x1D03      	BTFSS      STATUS, 2
0x0008	0x280B      	GOTO       L__mask32
0x0009	0x3000      	MOVLW      0
0x000A	0x0622      	XORWF      FARG_mask_character, 0
L__mask32:
0x000B	0x1D03      	BTFSS      STATUS, 2
0x000C	0x2810      	GOTO       L__mask2
;TestCode2.mbas,8 :: 		temp_holder = 0x01
0x000D	0x3001      	MOVLW      1
0x000E	0x00F4      	MOVWF      R4
0x000F	0x01F5      	CLRF       R4+1
L__mask2:
;TestCode2.mbas,10 :: 		if character = 1 then
0x0010	0x3000      	MOVLW      0
0x0011	0x0623      	XORWF      FARG_mask_character+1, 0
0x0012	0x1D03      	BTFSS      STATUS, 2
0x0013	0x2816      	GOTO       L__mask33
0x0014	0x3001      	MOVLW      1
0x0015	0x0622      	XORWF      FARG_mask_character, 0
L__mask33:
0x0016	0x1D03      	BTFSS      STATUS, 2
0x0017	0x281B      	GOTO       L__mask5
;TestCode2.mbas,11 :: 		temp_holder = 0x08
0x0018	0x3008      	MOVLW      8
0x0019	0x00F4      	MOVWF      R4
0x001A	0x01F5      	CLRF       R4+1
L__mask5:
;TestCode2.mbas,13 :: 		if character = 2 then
0x001B	0x3000      	MOVLW      0
0x001C	0x0623      	XORWF      FARG_mask_character+1, 0
0x001D	0x1D03      	BTFSS      STATUS, 2
0x001E	0x2821      	GOTO       L__mask34
0x001F	0x3002      	MOVLW      2
0x0020	0x0622      	XORWF      FARG_mask_character, 0
L__mask34:
0x0021	0x1D03      	BTFSS      STATUS, 2
0x0022	0x2826      	GOTO       L__mask8
;TestCode2.mbas,14 :: 		temp_holder = 0x06
0x0023	0x3006      	MOVLW      6
0x0024	0x00F4      	MOVWF      R4
0x0025	0x01F5      	CLRF       R4+1
L__mask8:
;TestCode2.mbas,16 :: 		if character = 3 then
0x0026	0x3000      	MOVLW      0
0x0027	0x0623      	XORWF      FARG_mask_character+1, 0
0x0028	0x1D03      	BTFSS      STATUS, 2
0x0029	0x282C      	GOTO       L__mask35
0x002A	0x3003      	MOVLW      3
0x002B	0x0622      	XORWF      FARG_mask_character, 0
L__mask35:
0x002C	0x1D03      	BTFSS      STATUS, 2
0x002D	0x2831      	GOTO       L__mask11
;TestCode2.mbas,17 :: 		temp_holder = 0x30
0x002E	0x3030      	MOVLW      48
0x002F	0x00F4      	MOVWF      R4
0x0030	0x01F5      	CLRF       R4+1
L__mask11:
;TestCode2.mbas,19 :: 		result = temp_holder
0x0031	0x0874      	MOVF       R4, 0
0x0032	0x00F2      	MOVWF      R2
0x0033	0x0875      	MOVF       R4+1, 0
0x0034	0x00F3      	MOVWF      R2+1
;TestCode2.mbas,20 :: 		end sub
0x0035	0x0872      	MOVF       R2, 0
0x0036	0x00F0      	MOVWF      R0
0x0037	0x0873      	MOVF       R2+1, 0
0x0038	0x00F1      	MOVWF      R0+1
L_end_mask:
0x0039	0x0008      	RETURN
; end of _mask
_main:
;TestCode2.mbas,23 :: 		dim a , x as integer ' declare two variables 'a' and 'x'
;TestCode2.mbas,25 :: 		TRISA = 0x00
0x003A	0x1683      	BSF        STATUS, 5
0x003B	0x1303      	BCF        STATUS, 6
0x003C	0x0185      	CLRF       TRISA
;TestCode2.mbas,26 :: 		PORTA=0x00
0x003D	0x1283      	BCF        STATUS, 5
0x003E	0x0185      	CLRF       PORTA
;TestCode2.mbas,28 :: 		TRISD = 0x00
0x003F	0x1683      	BSF        STATUS, 5
0x0040	0x0188      	CLRF       TRISD
;TestCode2.mbas,29 :: 		PORTD=0x00
0x0041	0x1283      	BCF        STATUS, 5
0x0042	0x0188      	CLRF       PORTD
;TestCode2.mbas,30 :: 		while(1)
L__main15:
;TestCode2.mbas,31 :: 		PORTA=0x20 'set port A to 32 bits
0x0043	0x3020      	MOVLW      32
0x0044	0x0085      	MOVWF      PORTA
;TestCode2.mbas,32 :: 		for x = 0 to 3
0x0045	0x01A0      	CLRF       main_x
0x0046	0x01A1      	CLRF       main_x+1
L__main20:
;TestCode2.mbas,33 :: 		PORTD=mask(x)' set port D to a masked value of the loop counter x
0x0047	0x0820      	MOVF       main_x, 0
0x0048	0x00A2      	MOVWF      FARG_mask_character
0x0049	0x0821      	MOVF       main_x+1, 0
0x004A	0x00A3      	MOVWF      FARG_mask_character+1
0x004B	0x2003      	CALL       _mask
0x004C	0x0870      	MOVF       R0, 0
0x004D	0x0088      	MOVWF      PORTD
;TestCode2.mbas,34 :: 		Delay_ms(2000)' delay for 2000 milliseconds
0x004E	0x3015      	MOVLW      21
0x004F	0x00FB      	MOVWF      R11
0x0050	0x304B      	MOVLW      75
0x0051	0x00FC      	MOVWF      R12
0x0052	0x30BE      	MOVLW      190
0x0053	0x00FD      	MOVWF      R13
L__main24:
0x0054	0x0BFD      	DECFSZ     R13, 1
0x0055	0x2854      	GOTO       L__main24
0x0056	0x0BFC      	DECFSZ     R12, 1
0x0057	0x2854      	GOTO       L__main24
0x0058	0x0BFB      	DECFSZ     R11, 1
0x0059	0x2854      	GOTO       L__main24
0x005A	0x0000      	NOP
;TestCode2.mbas,35 :: 		next x
0x005B	0x3000      	MOVLW      0
0x005C	0x0621      	XORWF      main_x+1, 0
0x005D	0x1D03      	BTFSS      STATUS, 2
0x005E	0x2861      	GOTO       L__main37
0x005F	0x3003      	MOVLW      3
0x0060	0x0620      	XORWF      main_x, 0
L__main37:
0x0061	0x1903      	BTFSC      STATUS, 2
0x0062	0x2867      	GOTO       L__main23
0x0063	0x0AA0      	INCF       main_x, 1
0x0064	0x1903      	BTFSC      STATUS, 2
0x0065	0x0AA1      	INCF       main_x+1, 1
0x0066	0x2847      	GOTO       L__main20
L__main23:
;TestCode2.mbas,37 :: 		PORTA=0x10 ' set port A to 16 bits
0x0067	0x3010      	MOVLW      16
0x0068	0x0085      	MOVWF      PORTA
;TestCode2.mbas,38 :: 		for x = 0 to 3
0x0069	0x01A0      	CLRF       main_x
0x006A	0x01A1      	CLRF       main_x+1
L__main26:
;TestCode2.mbas,39 :: 		PORTD=mask(x)' set port D to  a masked value of the loop counter x
0x006B	0x0820      	MOVF       main_x, 0
0x006C	0x00A2      	MOVWF      FARG_mask_character
0x006D	0x0821      	MOVF       main_x+1, 0
0x006E	0x00A3      	MOVWF      FARG_mask_character+1
0x006F	0x2003      	CALL       _mask
0x0070	0x0870      	MOVF       R0, 0
0x0071	0x0088      	MOVWF      PORTD
;TestCode2.mbas,40 :: 		Delay_ms(2000)' delay 2000 milliseconds
0x0072	0x3015      	MOVLW      21
0x0073	0x00FB      	MOVWF      R11
0x0074	0x304B      	MOVLW      75
0x0075	0x00FC      	MOVWF      R12
0x0076	0x30BE      	MOVLW      190
0x0077	0x00FD      	MOVWF      R13
L__main30:
0x0078	0x0BFD      	DECFSZ     R13, 1
0x0079	0x2878      	GOTO       L__main30
0x007A	0x0BFC      	DECFSZ     R12, 1
0x007B	0x2878      	GOTO       L__main30
0x007C	0x0BFB      	DECFSZ     R11, 1
0x007D	0x2878      	GOTO       L__main30
0x007E	0x0000      	NOP
;TestCode2.mbas,41 :: 		next x
0x007F	0x3000      	MOVLW      0
0x0080	0x0621      	XORWF      main_x+1, 0
0x0081	0x1D03      	BTFSS      STATUS, 2
0x0082	0x2885      	GOTO       L__main38
0x0083	0x3003      	MOVLW      3
0x0084	0x0620      	XORWF      main_x, 0
L__main38:
0x0085	0x1903      	BTFSC      STATUS, 2
0x0086	0x288B      	GOTO       L__main29
0x0087	0x0AA0      	INCF       main_x, 1
0x0088	0x1903      	BTFSC      STATUS, 2
0x0089	0x0AA1      	INCF       main_x+1, 1
0x008A	0x286B      	GOTO       L__main26
L__main29:
;TestCode2.mbas,42 :: 		wend
0x008B	0x2843      	GOTO       L__main15
L_end_main:
0x008C	0x288C      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [55]    _mask
0x003A      [83]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0005       [1]    PORTA
0x0008       [1]    PORTD
0x0020       [2]    main_x
0x0022       [2]    FARG_mask_character
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [1]    TRISA
0x0088       [1]    TRISD
